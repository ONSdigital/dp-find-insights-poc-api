// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-find-insights-poc-api/config"
	"github.com/ONSdigital/dp-find-insights-poc-api/pkg/aws"
	"github.com/ONSdigital/dp-find-insights-poc-api/pkg/database"
	"github.com/ONSdigital/dp-find-insights-poc-api/service"
	"net/http"
	"sync"
	"time"
)

// Ensure, that InitialiserMock does implement service.Initialiser.
// If this is not the case, regenerate this file with moq.
var _ service.Initialiser = &InitialiserMock{}

// InitialiserMock is a mock implementation of service.Initialiser.
//
// 	func TestSomethingThatUsesInitialiser(t *testing.T) {
//
// 		// make and configure a mocked service.Initialiser
// 		mockedInitialiser := &InitialiserMock{
// 			DoGetAWSFunc: func() (*aws.Clients, error) {
// 				panic("mock out the DoGetAWS method")
// 			},
// 			DoGetDatabaseFunc: func(driverName string, dsn string) (*database.Database, error) {
// 				panic("mock out the DoGetDatabase method")
// 			},
// 			DoGetHTTPServerFunc: func(bindAddr string, router http.Handler, writeTimeout time.Duration) service.HTTPServer {
// 				panic("mock out the DoGetHTTPServer method")
// 			},
// 			DoGetHealthCheckFunc: func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
// 				panic("mock out the DoGetHealthCheck method")
// 			},
// 		}
//
// 		// use mockedInitialiser in code that requires service.Initialiser
// 		// and then make assertions.
//
// 	}
type InitialiserMock struct {
	// DoGetAWSFunc mocks the DoGetAWS method.
	DoGetAWSFunc func() (*aws.Clients, error)

	// DoGetDatabaseFunc mocks the DoGetDatabase method.
	DoGetDatabaseFunc func(driverName string, dsn string) (*database.Database, error)

	// DoGetHTTPServerFunc mocks the DoGetHTTPServer method.
	DoGetHTTPServerFunc func(bindAddr string, router http.Handler, writeTimeout time.Duration) service.HTTPServer

	// DoGetHealthCheckFunc mocks the DoGetHealthCheck method.
	DoGetHealthCheckFunc func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error)

	// calls tracks calls to the methods.
	calls struct {
		// DoGetAWS holds details about calls to the DoGetAWS method.
		DoGetAWS []struct {
		}
		// DoGetDatabase holds details about calls to the DoGetDatabase method.
		DoGetDatabase []struct {
			// DriverName is the driverName argument value.
			DriverName string
			// Dsn is the dsn argument value.
			Dsn string
		}
		// DoGetHTTPServer holds details about calls to the DoGetHTTPServer method.
		DoGetHTTPServer []struct {
			// BindAddr is the bindAddr argument value.
			BindAddr string
			// Router is the router argument value.
			Router http.Handler
			// WriteTimeout is the writeTimeout argument value.
			WriteTimeout time.Duration
		}
		// DoGetHealthCheck holds details about calls to the DoGetHealthCheck method.
		DoGetHealthCheck []struct {
			// Cfg is the cfg argument value.
			Cfg *config.Config
			// BuildTime is the buildTime argument value.
			BuildTime string
			// GitCommit is the gitCommit argument value.
			GitCommit string
			// Version is the version argument value.
			Version string
		}
	}
	lockDoGetAWS         sync.RWMutex
	lockDoGetDatabase    sync.RWMutex
	lockDoGetHTTPServer  sync.RWMutex
	lockDoGetHealthCheck sync.RWMutex
}

// DoGetAWS calls DoGetAWSFunc.
func (mock *InitialiserMock) DoGetAWS() (*aws.Clients, error) {
	if mock.DoGetAWSFunc == nil {
		panic("InitialiserMock.DoGetAWSFunc: method is nil but Initialiser.DoGetAWS was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDoGetAWS.Lock()
	mock.calls.DoGetAWS = append(mock.calls.DoGetAWS, callInfo)
	mock.lockDoGetAWS.Unlock()
	return mock.DoGetAWSFunc()
}

// DoGetAWSCalls gets all the calls that were made to DoGetAWS.
// Check the length with:
//     len(mockedInitialiser.DoGetAWSCalls())
func (mock *InitialiserMock) DoGetAWSCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDoGetAWS.RLock()
	calls = mock.calls.DoGetAWS
	mock.lockDoGetAWS.RUnlock()
	return calls
}

// DoGetDatabase calls DoGetDatabaseFunc.
func (mock *InitialiserMock) DoGetDatabase(driverName string, dsn string) (*database.Database, error) {
	if mock.DoGetDatabaseFunc == nil {
		panic("InitialiserMock.DoGetDatabaseFunc: method is nil but Initialiser.DoGetDatabase was just called")
	}
	callInfo := struct {
		DriverName string
		Dsn        string
	}{
		DriverName: driverName,
		Dsn:        dsn,
	}
	mock.lockDoGetDatabase.Lock()
	mock.calls.DoGetDatabase = append(mock.calls.DoGetDatabase, callInfo)
	mock.lockDoGetDatabase.Unlock()
	return mock.DoGetDatabaseFunc(driverName, dsn)
}

// DoGetDatabaseCalls gets all the calls that were made to DoGetDatabase.
// Check the length with:
//     len(mockedInitialiser.DoGetDatabaseCalls())
func (mock *InitialiserMock) DoGetDatabaseCalls() []struct {
	DriverName string
	Dsn        string
} {
	var calls []struct {
		DriverName string
		Dsn        string
	}
	mock.lockDoGetDatabase.RLock()
	calls = mock.calls.DoGetDatabase
	mock.lockDoGetDatabase.RUnlock()
	return calls
}

// DoGetHTTPServer calls DoGetHTTPServerFunc.
func (mock *InitialiserMock) DoGetHTTPServer(bindAddr string, router http.Handler, writeTimeout time.Duration) service.HTTPServer {
	if mock.DoGetHTTPServerFunc == nil {
		panic("InitialiserMock.DoGetHTTPServerFunc: method is nil but Initialiser.DoGetHTTPServer was just called")
	}
	callInfo := struct {
		BindAddr     string
		Router       http.Handler
		WriteTimeout time.Duration
	}{
		BindAddr:     bindAddr,
		Router:       router,
		WriteTimeout: writeTimeout,
	}
	mock.lockDoGetHTTPServer.Lock()
	mock.calls.DoGetHTTPServer = append(mock.calls.DoGetHTTPServer, callInfo)
	mock.lockDoGetHTTPServer.Unlock()
	return mock.DoGetHTTPServerFunc(bindAddr, router, writeTimeout)
}

// DoGetHTTPServerCalls gets all the calls that were made to DoGetHTTPServer.
// Check the length with:
//     len(mockedInitialiser.DoGetHTTPServerCalls())
func (mock *InitialiserMock) DoGetHTTPServerCalls() []struct {
	BindAddr     string
	Router       http.Handler
	WriteTimeout time.Duration
} {
	var calls []struct {
		BindAddr     string
		Router       http.Handler
		WriteTimeout time.Duration
	}
	mock.lockDoGetHTTPServer.RLock()
	calls = mock.calls.DoGetHTTPServer
	mock.lockDoGetHTTPServer.RUnlock()
	return calls
}

// DoGetHealthCheck calls DoGetHealthCheckFunc.
func (mock *InitialiserMock) DoGetHealthCheck(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
	if mock.DoGetHealthCheckFunc == nil {
		panic("InitialiserMock.DoGetHealthCheckFunc: method is nil but Initialiser.DoGetHealthCheck was just called")
	}
	callInfo := struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}{
		Cfg:       cfg,
		BuildTime: buildTime,
		GitCommit: gitCommit,
		Version:   version,
	}
	mock.lockDoGetHealthCheck.Lock()
	mock.calls.DoGetHealthCheck = append(mock.calls.DoGetHealthCheck, callInfo)
	mock.lockDoGetHealthCheck.Unlock()
	return mock.DoGetHealthCheckFunc(cfg, buildTime, gitCommit, version)
}

// DoGetHealthCheckCalls gets all the calls that were made to DoGetHealthCheck.
// Check the length with:
//     len(mockedInitialiser.DoGetHealthCheckCalls())
func (mock *InitialiserMock) DoGetHealthCheckCalls() []struct {
	Cfg       *config.Config
	BuildTime string
	GitCommit string
	Version   string
} {
	var calls []struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}
	mock.lockDoGetHealthCheck.RLock()
	calls = mock.calls.DoGetHealthCheck
	mock.lockDoGetHealthCheck.RUnlock()
	return calls
}
