#
# IMPORTANT: run 'make generate' after editing this file!
#
 
openapi: "3.0.0"
info:
  title: "dp-find-insights-poc-api"
  description: "Experimental application for developing CI/CD pipeline"
  version: 1.0.0
  license:
    name: "Open Government Licence v3.0"
    url: "http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"

paths:
  /metadata/{year}:
    get:
      tags:
        - public
      summary: Get Metadata
      description: Returns simple TopicTable Category Data
      parameters:
        - in: path
          name: year
          description: census year
          required: true
          schema:
            type: integer
        - in: query
          name: filtertotals
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataResponse"
        default:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /swagger:
    get:
      tags:
        - spec
      summary: spec
      description: spec
      responses:
        200:
          description: "Returns a JSON form of this file"
          content:
            application/json:

  /swaggerui:
    get:
      tags:
        - spec
      summary: spec
      description: spec
      responses:
        200:
          description: "Returns swaggerui HTML form"
          content:
            text/html:

  /health:
    get:
      tags:
        - doc
      summary: Returns API's health status
      description: Returns health status of the API and checks on dependent services
      responses:
        200:
          description: "Successfully returns OK status with checks of dependent services"
          content:
            application/json:
            schema:
              $ref: "#/components/schemas/Health"
        429:
          description: "Services warming up or degraded (at least one check in WARNING or CRITICAL status)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"
        default:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ckmeans/{year}:
    get:
      tags:
        - public
      summary: calculate ckmeans over a given category and geography type
      descriptions: Returns a list of the maximum values in each ckmean cluster.
      parameters:
        - in: path
          name: year
          description: census year
          required: true
          schema:
            type: integer
        - in: query
          name: cat
          schema:
            type: string
        - in: query
          name: geotype
          schema:
            type: string
        - in: query
          name: k
          schema:
            type: integer
      responses:
        200:
          description: ckmeans successfully calculated
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
                  format: double
        204:
          descriptions: no results found
        400:
          description: missing or badly formed input values
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ckmeansratio/{year}:
    get:
      tags:
        - public
      summary: calculate ckmeans for the ratio between two given categories (cat1 / cat2) for a given geography type
      descriptions: Returns a list of the maximum values in each ckmean cluster.
      parameters:
        - in: path
          name: year
          description: census year
          required: true
          schema:
            type: integer
        - in: query
          name: cat1
          schema:
            type: string
        - in: query
          name: cat2
          schema:
            type: string
        - in: query
          name: geotype
          schema:
            type: string
        - in: query
          name: k
          schema:
            type: integer
      responses:
        200:
          description: ckmeans successfully calculated
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
                  format: double
        204:
          descriptions: no results found
        400:
          description: missing or badly formed input values
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /query/{year}:
    get:
      tags:
        - public
      summary: query census
      parameters:
        - in: path
          name: year
          description: census year
          required: true
          schema:
            type: integer
        - in: query
          name: rows
          schema:
            type: array
            items:
              type: string
        - in: query
          name: cols
          schema:
            type: array
            items:
              type: string
        - in: query
          name: bbox
          schema:
            type: string
        - in: query
          name: geotype
          schema:
            type: array
            items:
              type: string
        - in: query
          name: location
          schema:
            type: string
        - in: query
          name: radius
          schema:
            type: integer
        - in: query
          name: polygon
          schema:
            type: string
        - in: query
          name: censustable
          schema:
            type: string
      responses:
        200:
          content:
            text/csv:
        default:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: error message
          example: "could not say hello"

    Health:
      type: object
      properties:
        status:
          type: string
          description: "The status of the API"
          enum: ["OK", "WARNING", "CRITICAL"]
        version:
          type: object
          properties:
            build_time:
              type: string
              description: "The build date and time of the API"
              example: "2020-06-11T12:49:20+01:00"
            git_commit:
              type: string
              description: "The git commit hash of the API"
              example: "7c2febbf2b818175112478d4ffbadbee1b654f63"
            language:
              type: string
              description: "The programming language used to implement API"
              example: "go"
            language_version:
              type: string
              description: "The version of the programming language used to implement API"
              example: "go1.14.3"
            version:
              type: string
              description: "The version of API"
              example: "1.0.0"
        uptime:
          type: string
          description: "The uptime of API"
          example: "34516"
        start_time:
          type: string
          description: "The start date and time of API running"
          example: "2020-06-11T11:49:21.520922Z"
        checks:
          type: array
          items:
            $ref: '#/components/schemas/HealthChecker'

    HealthChecker:
      type: object
      properties:
        name:
          type: string
          description: "The name of external service used by API"
          enum: ["mongodb"]
        status:
          type: string
          description: "The status of the external service"
          enum: ["OK", "WARNING", "CRITICAL"]
        message:
          type: string
          description: "The message status of the external service"
          example: "mongodb is OK"
        last_checked:
          type: string
          description: "The last health check date and time of the external service"
          example: "2020-06-11T11:49:50.330089Z"
        last_success:
          type: string
          description: "The last successful health check date and time of the external service"
          example: "2020-06-11T11:49:50.330089Z"
        last_failure:
          type: string
          description: "The last failed health check date and time of the external service"
          example: "2019-09-22T11:48:51.0000001Z"


    MetadataResponse:
      type: array
      items: 
        $ref: '#/components/schemas/Metadata'
       
    Metadata:
      type: object
      properties: 
        code:
          type: string
        name:
          type: string
        slug:
          type: string
        tables:
          $ref: '#/components/schemas/Tables'

    Categories:
      type: array
      items: 
        $ref: '#/components/schemas/Triplet'
       
    Triplet:
      type: object
      properties: 
        code:
          type: string
        name:
          type: string
        slug:
          type: string
       
    Tables:
      type: array
      items: 
        $ref: '#/components/schemas/Table'

    Table:
      type: object
      properties: 
        code:
          type: string
        name:
          type: string
        slug:
          type: string
        categories: 
          $ref: '#/components/schemas/Categories'
        total:
          description: |
            Optional. If filtertotals=true, totals column for each table will be removed from 'categories' array and returned seperately here.
            Otherwise totals column is included in 'categories' array, and 'total' will not be included in response.
          $ref: '#/components/schemas/Triplet'

